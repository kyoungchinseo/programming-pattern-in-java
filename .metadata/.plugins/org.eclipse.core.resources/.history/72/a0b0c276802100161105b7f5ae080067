
public class ChainPattern {

	private static AbstractLogger getChainOfLoggers() {
		AbstractLogger errorLogger = new ErrorLogger(AbstractLogger.ERROR);
		AbstractLogger fileLogger = new FileLogger(AbstractLogger.DEBUG);
		AbstractLogger consoleLogger = new ConsoleLogger(AbstractLogger.INFO);

		errorLogger.setNextLogger(fileLogger);
		fileLogger.setNextLogger(consoleLogger);

		return errorLogger;
	}

	public static void main(String[] args) {

		AbstractLogger loggerChain = getChainOfLoggers();

		loggerChain.logMessage(AbstractLogger.INFO, "information");

		loggerChain.logMessage(AbstractLogger.DEBUG, "debug");

		loggerChain.logMessage(AbstractLogger.ERROR, "error");

	}

}

// In this pattern, normally each receiver contains reference to another
// receiver. If one object cannot handle the request then it passes the same to
// the next receiver and so on.


